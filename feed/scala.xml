<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.jez.io/feed/scala.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jez.io/" rel="alternate" type="text/html" /><updated>2025-04-26T15:27:53-04:00</updated><id>https://blog.jez.io/feed/scala.xml</id><title type="html">Jake Zimmerman | Scala</title><subtitle>A collection of blog posts about programming, software, types, programming languages, Sorbet, Vim, Markdown, and more.</subtitle><author><name>Jake Zimmerman</name></author><entry><title type="html">Ruby’s private keyword is weird</title><link href="https://blog.jez.io/ruby-private/" rel="alternate" type="text/html" title="Ruby’s private keyword is weird" /><published>2023-02-13T13:58:43-05:00</published><updated>2023-02-13T13:58:43-05:00</updated><id>https://blog.jez.io/ruby-private</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="scala" /><summary type="html"><![CDATA[Ruby's `private` keyword means something different compared to basically all other object-oriented languages. Most other languages don't even have a feature matching what Ruby calls `private`, but incredibly, Scala does, which it calls `protected[this]` (meaning "object-protected", as opposed to the normal `protected` keyword which is called "class-protected"). First let's review what `private` normally means, and then discuss what `private` in Ruby means (which will also amount to an explanation of what `protected[this]` means in Scala).]]></summary></entry></feed>