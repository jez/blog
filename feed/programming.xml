<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.jez.io/feed/programming.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jez.io/" rel="alternate" type="text/html" /><updated>2025-04-14T18:06:42-04:00</updated><id>https://blog.jez.io/feed/programming.xml</id><title type="html">Jake Zimmerman | Programming</title><subtitle>A collection of blog posts about programming, software, types, programming languages, Sorbet, Vim, Markdown, and more.</subtitle><author><name>Jake Zimmerman</name></author><entry><title type="html">Ruby’s Conditional Send is not Safe Navigation</title><link href="https://blog.jez.io/conditional-send/" rel="alternate" type="text/html" title="Ruby’s Conditional Send is not Safe Navigation" /><published>2023-09-03T11:06:27-04:00</published><updated>2023-09-03T11:06:27-04:00</updated><id>https://blog.jez.io/conditional-send</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="javascript" /><category term="programming" /><summary type="html"><![CDATA[A brief explanation of why Ruby calls x&.foo "conditional send" and not "safe navigation."]]></summary></entry><entry><title type="html">Every type is defined by its intro and elim forms</title><link href="https://blog.jez.io/intro-elim/" rel="alternate" type="text/html" title="Every type is defined by its intro and elim forms" /><published>2023-04-23T19:43:00-04:00</published><updated>2023-04-23T19:43:00-04:00</updated><id>https://blog.jez.io/intro-elim</id><author><name>Jake Zimmerman</name></author><category term="programming" /><category term="plt" /><category term="types" /><summary type="html"><![CDATA[I took a course about programming languages in college. It was a very theory-oriented course, but as it turned out I learned more about how to write software from this theory course than many of my peers who took our school's software engineering elective.]]></summary></entry><entry><title type="html">On Programming Language Choice</title><link href="https://blog.jez.io/on-language-choice/" rel="alternate" type="text/html" title="On Programming Language Choice" /><published>2019-06-21T12:30:25-04:00</published><updated>2019-06-21T12:30:25-04:00</updated><id>https://blog.jez.io/on-language-choice</id><author><name>Jake Zimmerman</name></author><category term="programming" /><summary type="html"><![CDATA[Absolutely the most regret from choosing a programming language has come from forgetting to ask this question:]]></summary></entry><entry><title type="html">Case Exhaustiveness in Flow</title><link href="https://blog.jez.io/flow-exhaustiveness/" rel="alternate" type="text/html" title="Case Exhaustiveness in Flow" /><published>2018-04-15T23:02:26-04:00</published><updated>2018-04-15T23:02:26-04:00</updated><id>https://blog.jez.io/flow-exhaustiveness</id><author><name>Jake Zimmerman</name></author><category term="javascript" /><category term="types" /><category term="flow" /><category term="programming" /><summary type="html"><![CDATA[Compared to some other languages, Flow's story around exhaustiveness checking within 'if / else' and 'switch' statements leaves something to be desired. By default, Flow doesn't do any exhaustiveness checks! But we can opt-in to exhaustiveness checking one statement at a time. In this post, we'll discover from the ground up how Flow's exhaustiveness checking behaves.]]></summary></entry><entry><title type="html">Code Review from the Command Line</title><link href="https://blog.jez.io/cli-code-review/" rel="alternate" type="text/html" title="Code Review from the Command Line" /><published>2018-01-13T16:14:24-05:00</published><updated>2018-01-13T16:14:24-05:00</updated><id>https://blog.jez.io/cli-code-review</id><author><name>Jake Zimmerman</name></author><category term="bash" /><category term="git" /><category term="programming" /><category term="vim" /><category term="javascript" /><summary type="html"><![CDATA[I do the bulk of my code reviews from the command line, especially when reviewing larger changes. I've built up a number of tools and config settings that help me dig into the nuances of the code I'm reviewing, so that I can understand it better than if I were just browsing online.]]></summary></entry><entry><title type="html">Tests, Types, &amp;amp; Correctness</title><link href="https://blog.jez.io/tests-types-correctness/" rel="alternate" type="text/html" title="Tests, Types, &amp;amp; Correctness" /><published>2017-09-10T19:50:36-04:00</published><updated>2017-09-10T19:50:36-04:00</updated><id>https://blog.jez.io/tests-types-correctness</id><author><name>Jake Zimmerman</name></author><category term="programming" /><category term="fragment" /><category term="types" /><summary type="html"><![CDATA[It's important to both have strong testing practices and languages with disciplined type systems. The hardest part of writing quality software is ensuring that it runs without bugs. This is why testing and type systems are complementary---they're distinct tools to help us write better code.]]></summary></entry><entry><title type="html">If, Else, &amp;amp; Purity</title><link href="https://blog.jez.io/if-else-purity/" rel="alternate" type="text/html" title="If, Else, &amp;amp; Purity" /><published>2017-09-01T01:38:43-04:00</published><updated>2017-09-01T01:38:43-04:00</updated><id>https://blog.jez.io/if-else-purity</id><author><name>Jake Zimmerman</name></author><category term="programming" /><category term="fragment" /><category term="types" /><summary type="html"><![CDATA[I prefer to let the language I'm using think on my behalf as much as possible. Ideally, the language is rich enough that the proof of correctness is inherent in the code I've written. Even when I use looser languages, these principled languages inform the structure of my code.]]></summary></entry><entry><title type="html">The Joys of the Craft</title><link href="https://blog.jez.io/2014/12/13/the-joys-of-the-craft/" rel="alternate" type="text/html" title="The Joys of the Craft" /><published>2014-12-13T20:52:09-05:00</published><updated>2014-12-13T20:52:09-05:00</updated><id>https://blog.jez.io/2014/12/13/the-joys-of-the-craft</id><author><name>Jake Zimmerman</name></author><category term="books" /><category term="programming" /><summary type="html"><![CDATA[An exceprt from Frederick P. Brooks's book The Mythical Man-Month on the joys of programming.]]></summary></entry></feed>