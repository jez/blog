<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.jez.io/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jez.io/" rel="alternate" type="text/html" /><updated>2025-04-26T15:27:53-04:00</updated><id>https://blog.jez.io/atom.xml</id><title type="html">Jake Zimmerman</title><subtitle>A collection of blog posts about programming, software, types, programming languages, Sorbet, Vim, Markdown, and more.</subtitle><author><name>Jake Zimmerman</name></author><entry><title type="html">Past, Present, and Future of Sorbet Type Syntax</title><link href="https://blog.jez.io/history-of-sorbet-syntax/" rel="alternate" type="text/html" title="Past, Present, and Future of Sorbet Type Syntax" /><published>2025-04-25T01:57:00-04:00</published><updated>2025-04-25T01:57:00-04:00</updated><id>https://blog.jez.io/history-of-sorbet-syntax</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><category term="plt" /><summary type="html"><![CDATA[A discussion of how Sorbet's type syntax came to be, the problems it solves, and how it could improve.]]></summary></entry><entry><title type="html">Typing instance variables in mixins</title><link href="https://blog.jez.io/ivars-in-mixins/" rel="alternate" type="text/html" title="Typing instance variables in mixins" /><published>2025-04-14T17:09:03-04:00</published><updated>2025-04-14T17:09:03-04:00</updated><id>https://blog.jez.io/ivars-in-mixins</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><summary type="html"><![CDATA[Sorbet does not (yet?) have "abstract instance variables" for use inside abstract modules, but abstract methods are a close approximation.]]></summary></entry><entry><title type="html">What if typing on phones was fast?</title><link href="https://blog.jez.io/typing-on-phones/" rel="alternate" type="text/html" title="What if typing on phones was fast?" /><published>2024-11-26T20:32:13-05:00</published><updated>2024-11-26T20:32:13-05:00</updated><id>https://blog.jez.io/typing-on-phones</id><author><name>Jake Zimmerman</name></author><category term="fragment" /><summary type="html"><![CDATA[What more would be possible if text input on phones was as fast and precise as text input on keyboards?]]></summary></entry><entry><title type="html">Approximating strace with Instruments.app</title><link href="https://blog.jez.io/instruments-app-strace/" rel="alternate" type="text/html" title="Approximating strace with Instruments.app" /><published>2024-10-09T17:17:13-04:00</published><updated>2024-10-09T17:17:13-04:00</updated><id>https://blog.jez.io/instruments-app-strace</id><author><name>Jake Zimmerman</name></author><category term="debugging" /><category term="linux" /><category term="osx" /><summary type="html"><![CDATA[The other day I learned that Instruments.app can record file system activity on macOS!]]></summary></entry><entry><title type="html">Using my iPhone as a travel laptop</title><link href="https://blog.jez.io/iphone-travel-laptop/" rel="alternate" type="text/html" title="Using my iPhone as a travel laptop" /><published>2024-09-15T12:19:49-04:00</published><updated>2024-09-15T12:19:49-04:00</updated><id>https://blog.jez.io/iphone-travel-laptop</id><author><name>Jake Zimmerman</name></author><category term="meta" /><summary type="html"><![CDATA[A while back I picked up a tiny, folding, wireless keyboard to turn my phone into a passable laptop replacement when traveling. It's already incredible, and only one or two features are missing from iOS which would make it really amazing.]]></summary></entry><entry><title type="html">Bug squash: An underrated interview question</title><link href="https://blog.jez.io/bugsquash/" rel="alternate" type="text/html" title="Bug squash: An underrated interview question" /><published>2024-08-17T18:26:24-04:00</published><updated>2024-08-17T18:26:24-04:00</updated><id>https://blog.jez.io/bugsquash</id><author><name>Jake Zimmerman</name></author><category term="debugging" /><category term="interviewing" /><category term="practices" /><summary type="html"><![CDATA[I love bug squash interviews.]]></summary></entry><entry><title type="html">Generic methods cannot have non-generic defaults in Sorbet</title><link href="https://blog.jez.io/generic-method-default/" rel="alternate" type="text/html" title="Generic methods cannot have non-generic defaults in Sorbet" /><published>2024-07-28T13:47:45-04:00</published><updated>2024-07-28T13:47:45-04:00</updated><id>https://blog.jez.io/generic-method-default</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><summary type="html"><![CDATA[Sorbet does not allow generic methods to have non-generic default arguments. The best alternative is to split the method into two methods, with one implemented by calling the other with the default value.]]></summary></entry><entry><title type="html">A trick for invariant generics in Sorbet</title><link href="https://blog.jez.io/invariant-type-member-trick/" rel="alternate" type="text/html" title="A trick for invariant generics in Sorbet" /><published>2024-06-05T20:28:55-04:00</published><updated>2024-06-05T20:28:55-04:00</updated><id>https://blog.jez.io/invariant-type-member-trick</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><summary type="html"><![CDATA[There's a neat trick for using generic methods to get around some of the limitations that invariant type members in generic classes carry.]]></summary></entry><entry><title type="html">Old vs new case statement in Ruby</title><link href="https://blog.jez.io/case-when-in/" rel="alternate" type="text/html" title="Old vs new case statement in Ruby" /><published>2024-05-31T16:22:05-04:00</published><updated>2024-05-31T16:22:05-04:00</updated><id>https://blog.jez.io/case-when-in</id><author><name>Jake Zimmerman</name></author><category term="fragment" /><category term="ruby" /><summary type="html"><![CDATA[A quick note on why I prefer Ruby's old case/when syntax over the new pattern matching syntax with case/in.]]></summary></entry><entry><title type="html">Abstract singleton class methods are an abomination</title><link href="https://blog.jez.io/abstract-singleton-methods/" rel="alternate" type="text/html" title="Abstract singleton class methods are an abomination" /><published>2024-01-01T19:25:23-05:00</published><updated>2024-01-01T19:25:23-05:00</updated><id>https://blog.jez.io/abstract-singleton-methods</id><author><name>Jake Zimmerman</name></author><category term="ruby" /><category term="sorbet" /><category term="types" /><summary type="html"><![CDATA[Abstract singleton class methods do not belong in a well-behaved type system. Sorbet allows them anyways, which causes problems. Here's why they're bad and what to do instead.]]></summary></entry></feed>